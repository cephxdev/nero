// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v2

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Lists all available categories.
	// (GET /endpoints)
	GetCategories(w http.ResponseWriter, r *http.Request)

	// (GET /search)
	Search(w http.ResponseWriter, r *http.Request, params SearchParams)
	// Gets a random image or GIF from the available categories along with its metadata.
	// (GET /{category})
	GetCategoryFiles(w http.ResponseWriter, r *http.Request, category string, params GetCategoryFilesParams)
	// Gets a specific image from our categories.
	// (GET /{category}/{filename}.{format})
	GetCategoryFile(w http.ResponseWriter, r *http.Request, category string, filename string, format string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Lists all available categories.
// (GET /endpoints)
func (_ Unimplemented) GetCategories(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /search)
func (_ Unimplemented) Search(w http.ResponseWriter, r *http.Request, params SearchParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Gets a random image or GIF from the available categories along with its metadata.
// (GET /{category})
func (_ Unimplemented) GetCategoryFiles(w http.ResponseWriter, r *http.Request, category string, params GetCategoryFilesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Gets a specific image from our categories.
// (GET /{category}/{filename}.{format})
func (_ Unimplemented) GetCategoryFile(w http.ResponseWriter, r *http.Request, category string, filename string, format string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCategories operation middleware
func (siw *ServerInterfaceWrapper) GetCategories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCategories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Search operation middleware
func (siw *ServerInterfaceWrapper) Search(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams

	// ------------- Required query parameter "query" -------------

	if paramValue := r.URL.Query().Get("query"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "query"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Required query parameter "type" -------------

	if paramValue := r.URL.Query().Get("type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", r.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "category", Err: err})
		return
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", r.URL.Query(), &params.Amount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "amount", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Search(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCategoryFiles operation middleware
func (siw *ServerInterfaceWrapper) GetCategoryFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "category" -------------
	var category string

	err = runtime.BindStyledParameterWithOptions("simple", "category", chi.URLParam(r, "category"), &category, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "category", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCategoryFilesParams

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", r.URL.Query(), &params.Amount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "amount", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCategoryFiles(w, r, category, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCategoryFile operation middleware
func (siw *ServerInterfaceWrapper) GetCategoryFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "category" -------------
	var category string

	err = runtime.BindStyledParameterWithOptions("simple", "category", chi.URLParam(r, "category"), &category, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "category", Err: err})
		return
	}

	// ------------- Path parameter "filename" -------------
	var filename string

	err = runtime.BindStyledParameterWithOptions("simple", "filename", chi.URLParam(r, "filename"), &filename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filename", Err: err})
		return
	}

	// ------------- Path parameter "format" -------------
	var format string

	err = runtime.BindStyledParameterWithOptions("simple", "format", chi.URLParam(r, "format"), &format, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCategoryFile(w, r, category, filename, format)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/endpoints", wrapper.GetCategories)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/search", wrapper.Search)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{category}", wrapper.GetCategoryFiles)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{category}/{filename}.{format}", wrapper.GetCategoryFile)
	})

	return r
}

type GetCategoriesRequestObject struct {
}

type GetCategoriesResponseObject interface {
	VisitGetCategoriesResponse(w http.ResponseWriter, r *http.Request) error
}

type GetCategories200JSONResponse map[string]struct {
	Format string `json:"format"`
}

func (response GetCategories200JSONResponse) VisitGetCategoriesResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchRequestObject struct {
	Params SearchParams
}

type SearchResponseObject interface {
	VisitSearchResponse(w http.ResponseWriter, r *http.Request) error
}

type Search200JSONResponse struct {
	Results []Result `json:"results"`
}

func (response Search200JSONResponse) VisitSearchResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Search400JSONResponse Error

func (response Search400JSONResponse) VisitSearchResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryFilesRequestObject struct {
	Category string `json:"category"`
	Params   GetCategoryFilesParams
}

type GetCategoryFilesResponseObject interface {
	VisitGetCategoryFilesResponse(w http.ResponseWriter, r *http.Request) error
}

type GetCategoryFiles200JSONResponse struct {
	Results []Result `json:"results"`
}

func (response GetCategoryFiles200JSONResponse) VisitGetCategoryFilesResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryFiles404JSONResponse Error

func (response GetCategoryFiles404JSONResponse) VisitGetCategoryFilesResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryFileRequestObject struct {
	Category string `json:"category"`
	Filename string `json:"filename"`
	Format   string `json:"format"`
}

type GetCategoryFileResponseObject interface {
	VisitGetCategoryFileResponse(w http.ResponseWriter, r *http.Request) error
}

type GetCategoryFile200ResponseHeaders struct {
	AnimeName  string
	ArtistHref string
	ArtistName string
	SourceUrl  string
	Url        string
}

type GetCategoryFile200SchemaResponse struct {
	Body          io.Reader
	Headers       GetCategoryFile200ResponseHeaders
	ContentLength int64
}

func (response GetCategoryFile200SchemaResponse) VisitGetCategoryFileResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "schema")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("anime_name", fmt.Sprint(response.Headers.AnimeName))
	w.Header().Set("artist_href", fmt.Sprint(response.Headers.ArtistHref))
	w.Header().Set("artist_name", fmt.Sprint(response.Headers.ArtistName))
	w.Header().Set("source_url", fmt.Sprint(response.Headers.SourceUrl))
	w.Header().Set("url", fmt.Sprint(response.Headers.Url))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetCategoryFile404JSONResponse Error

func (response GetCategoryFile404JSONResponse) VisitGetCategoryFileResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Lists all available categories.
	// (GET /endpoints)
	GetCategories(ctx context.Context, request GetCategoriesRequestObject) (GetCategoriesResponseObject, error)

	// (GET /search)
	Search(ctx context.Context, request SearchRequestObject) (SearchResponseObject, error)
	// Gets a random image or GIF from the available categories along with its metadata.
	// (GET /{category})
	GetCategoryFiles(ctx context.Context, request GetCategoryFilesRequestObject) (GetCategoryFilesResponseObject, error)
	// Gets a specific image from our categories.
	// (GET /{category}/{filename}.{format})
	GetCategoryFile(ctx context.Context, request GetCategoryFileRequestObject) (GetCategoryFileResponseObject, error)
}
type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetCategories operation middleware
func (sh *strictHandler) GetCategories(w http.ResponseWriter, r *http.Request) {
	var request GetCategoriesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategories(ctx, request.(GetCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCategoriesResponseObject); ok {
		if err := validResponse.VisitGetCategoriesResponse(w, r); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Search operation middleware
func (sh *strictHandler) Search(w http.ResponseWriter, r *http.Request, params SearchParams) {
	var request SearchRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Search(ctx, request.(SearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Search")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchResponseObject); ok {
		if err := validResponse.VisitSearchResponse(w, r); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCategoryFiles operation middleware
func (sh *strictHandler) GetCategoryFiles(w http.ResponseWriter, r *http.Request, category string, params GetCategoryFilesParams) {
	var request GetCategoryFilesRequestObject

	request.Category = category
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategoryFiles(ctx, request.(GetCategoryFilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategoryFiles")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCategoryFilesResponseObject); ok {
		if err := validResponse.VisitGetCategoryFilesResponse(w, r); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCategoryFile operation middleware
func (sh *strictHandler) GetCategoryFile(w http.ResponseWriter, r *http.Request, category string, filename string, format string) {
	var request GetCategoryFileRequestObject

	request.Category = category
	request.Filename = filename
	request.Format = format

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategoryFile(ctx, request.(GetCategoryFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategoryFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCategoryFileResponseObject); ok {
		if err := validResponse.VisitGetCategoryFileResponse(w, r); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
